generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  firstName     String
  lastName      String
  password      String
  role          String     @default("USER") // USER, ADMIN
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  age           Int?
  height        Float?
  weight        Float?
  gender        String?
  activityLevel String?
  dietPlans     DietPlan[]
  goals         Goal[]
  blogPosts     BlogPost[]
  chatSessions  ChatSession[]

  @@map("users")
}

model DietPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  duration    Int
  calories    Int
  mealsPerDay Int
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  meals       Meal[]

  @@map("diet_plans")
}

model Meal {
  id           String       @id @default(cuid())
  name         String
  type         String
  calories     Int
  protein      Float
  carbs        Float
  fat          Float
  instructions String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  dietPlanId   String
  ingredients  Ingredient[]
  dietPlan     DietPlan     @relation(fields: [dietPlanId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  quantity String
  unit     String
  mealId   String
  meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model Goal {
  id        String    @id @default(cuid())
  type      String
  target    Float?
  deadline  DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model BlogPost {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  content     String
  excerpt     String?
  coverImage  String?
  published   Boolean        @default(false)
  publishedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  authorId    String
  categoryId  String?
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags        BlogPostTag[]

  @@map("blog_posts")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  posts     BlogPostTag[]

  @@map("blog_tags")
}

model BlogPostTag {
  id     String   @id @default(cuid())
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("blog_post_tags")
}

model ContactInfo {
  id                String   @id @default(cuid())
  companyName       String   @default("NutriSap")
  email             String
  supportEmail      String?
  phone             String
  phoneHours        String?
  address           String
  city              String
  state             String
  zipCode           String
  mondayFridayHours String   @default("8:00 AM - 6:00 PM")
  saturdayHours     String   @default("9:00 AM - 4:00 PM")
  sundayHours       String   @default("Closed")
  facebookUrl       String?
  twitterUrl        String?
  instagramUrl      String?
  linkedinUrl       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("contact_info")
}

model ChatSession {
  id        String        @id @default(cuid())
  userId    String?
  user      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String        @unique // For anonymous users
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role          String      // 'user' or 'assistant'
  content       String
  userContext   Json?       // Store user context at time of message
  createdAt     DateTime    @default(now())

  @@map("chat_messages")
}

model NutritionFact {
  id          String   @id @default(cuid())
  category    String   // e.g., "weight_loss", "muscle_gain", "general", "supplements"
  title       String
  content     String
  tags        String[] // Keywords for matching
  difficulty  String   @default("beginner") // beginner, intermediate, advanced
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("nutrition_facts")
}

model FoodDatabase {
  id              String  @id @default(cuid())
  name            String
  category        String  // e.g., "fruits", "vegetables", "proteins", "grains"
  caloriesPer100g Int
  proteinPer100g  Float
  carbsPer100g    Float
  fatPer100g      Float
  fiberPer100g    Float?
  sugarPer100g    Float?
  sodiumPer100g   Float?
  vitaminC        Float?  // mg per 100g
  calcium         Float?  // mg per 100g
  iron            Float?  // mg per 100g
  isOrganic       Boolean @default(false)
  commonServing   String? // e.g., "1 medium apple (182g)"
  tags            String[] // e.g., ["low_calorie", "high_protein", "vegetarian"]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("food_database")
}

model RecipeRecommendation {
  id              String   @id @default(cuid())
  name            String
  category        String   // breakfast, lunch, dinner, snack
  cuisine         String?  // italian, asian, mexican, etc.
  difficulty      String   @default("easy") // easy, medium, hard  
  prepTime        Int      // minutes
  cookTime        Int      // minutes
  servings        Int
  calories        Int      // per serving
  protein         Float    // grams per serving
  carbs           Float    // grams per serving
  fat             Float    // grams per serving
  ingredients     String[] // List of ingredients
  instructions    String   // Step by step instructions
  dietaryTags     String[] // vegetarian, vegan, gluten_free, dairy_free, etc.
  goalTags        String[] // weight_loss, muscle_gain, heart_healthy, etc.
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("recipe_recommendations")
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String?  // For anonymous users
  preferenceType String  // dietary, food_likes, goal_focus, etc.
  preferenceKey  String  // vegetarian, high_protein, weight_loss, etc.
  preferenceValue String // liked, disliked, interested, neutral
  confidence    Float   @default(0.5) // 0-1 confidence score
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, preferenceType, preferenceKey])
  @@unique([sessionId, preferenceType, preferenceKey])
  @@map("user_preferences")
}

model ChatFeedback {
  id         String   @id @default(cuid())
  sessionId  String
  messageId  String   // Reference to the chat message
  userId     String?
  feedbackType String // helpful, not_helpful, correct, incorrect
  rating     Int?     // 1-5 star rating
  comment    String?
  createdAt  DateTime @default(now())

  @@map("chat_feedback")
}

// Trainable Chatbot Models
model TrainingIntent {
  id          String            @id @default(cuid())
  name        String            @unique // e.g., "weight_loss_advice", "meal_planning"
  description String?
  category    String?           // e.g., "nutrition", "fitness", "general"
  isActive    Boolean           @default(true)
  priority    Int               @default(0) // Higher priority intents matched first
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String?           // Admin user who created this
  examples    TrainingExample[]
  responses   TrainingResponse[]
  @@map("training_intents")
}

model TrainingExample {
  id          String         @id @default(cuid())
  intentId    String
  intent      TrainingIntent @relation(fields: [intentId], references: [id], onDelete: Cascade)
  userInput   String         // Example user question/statement
  keywords    String[]       // Extracted keywords for matching
  confidence  Float          @default(1.0) // How confident this example represents the intent
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  @@map("training_examples")
}

model TrainingResponse {
  id          String         @id @default(cuid())
  intentId    String
  intent      TrainingIntent @relation(fields: [intentId], references: [id], onDelete: Cascade)
  response    String         // The bot response text
  responseType String        @default("text") // text, template, function
  conditions  Json?          // Conditions for when to use this response
  variables   Json?          // Template variables or function parameters
  priority    Int            @default(0) // Higher priority responses used first
  isActive    Boolean        @default(true)
  usageCount  Int            @default(0) // Track how often this response is used
  successRate Float?         // Based on user feedback
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  @@map("training_responses")
}

model ChatbotKnowledge {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?  // e.g., "nutrition_facts", "recipes", "tips"
  tags        String[] // For keyword matching
  source      String?  // Where this knowledge came from
  confidence  Float    @default(1.0)
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // Admin user who added this
  @@map("chatbot_knowledge")
}

model ChatbotAnalytics {
  id              String   @id @default(cuid())
  sessionId       String
  messageId       String?
  intentMatched   String?  // Which intent was matched
  confidence      Float?   // Confidence of the match
  responseUsed    String?  // Which response was used
  userSatisfied   Boolean? // Based on feedback
  responseTime    Int?     // Time taken to generate response (ms)
  fallbackUsed    Boolean  @default(false)
  errorOccurred   Boolean  @default(false)
  errorMessage    String?
  userContext     Json?    // User context at time of interaction
  createdAt       DateTime @default(now())
  @@map("chatbot_analytics")
}

model ChatbotTrainingSession {
  id            String   @id @default(cuid())
  name          String
  description   String?
  trainedBy     String   // Admin user ID
  intentsCount  Int      @default(0)
  examplesCount Int      @default(0)
  accuracy      Float?   // Overall training accuracy
  isActive      Boolean  @default(true)
  trainingData  Json?    // Backup of training configuration
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@map("chatbot_training_sessions")
}
